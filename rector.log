
6 files with changes
====================

1) tests/Helper/ModbusMasterMock.php:21

    ---------- begin diff ----------
@@ @@
             $reference.'.mock';
         if (file_exists($mockFile)) {
             $json = file_get_contents($mockFile);
-            return json_decode($json);
+            return json_decode($json, null, 512, JSON_THROW_ON_ERROR);
         } else {
             throw new Exception('No mock data available for ' . $reference);
         }
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)


2) src/VentilationUnit.php:182

    ---------- begin diff ----------
@@ @@
     }

     /**
-     * @param string $function
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     protected function getValueByFunction(string $function, bool $formatted = false, bool $force = false): mixed
@@ @@


     /************************* GETTER SECTION ************************/
-
     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getCurrentDateTime(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getStartExploitationDate(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getWorkTime(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getOutdoorTemperature(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getSupplyTemperature(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getExtractTemperature(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getExhaustTemperature(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getFanSpeed1(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getFanSpeed2(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getFanSpeedLevel(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getFilterDefaultTime(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getFilterRemainingTime(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getBypassTemperatureMin(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getBypassTemperatureMax(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getBypassManualTimeout(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getBypassState(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getUnitMode(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getPreheaterDutyCycle(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getCurrentBLState(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getWeekProgram(bool $formatted = false, bool $force = false): mixed
@@ @@
     }

     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getAlarm(bool $formatted = false, bool $force = false): mixed
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * MixedTypeRector


3) src/Translation.php:33

    ---------- begin diff ----------
@@ @@

     /**
      * Translation constructor.
-     * @param string $lang
      * @throws Exception
      */
     private function __construct(string $lang = 'en')
@@ @@
     }

     /**
-     * @param string $lang
      * @return Translation
      * @throws Exception
      */
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * MixedTypeRector


4) src/Register/Floating.php:9

    ---------- begin diff ----------
@@ @@
 {

     /**
-     * @var integer
-     */
-    protected int $decimals;
-
-    /**
      * Numeric constructor.
      * @param ModbusMasterTcp $modbus
      * @param int $address
@@ @@
         string $name,
         string $description,
         string $formatString = '%s',
-        int $decimals = 0
+        protected int $decimals = 0
     ) {
         parent::__construct($modbus, $address, $name, $description, $formatString);
-        $this->decimals = $decimals;
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * ClassPropertyAssignToConstructorPromotionRector (https://wiki.php.net/rfc/constructor_promotion https://github.com/php/php-src/pull/5291)


5) src/Register.php:7

    ---------- begin diff ----------
@@ @@
 abstract class Register
 {

-    const REGISTER_START_ADDRESS = 40001;
+    public const REGISTER_START_ADDRESS = 40001;

     /**
-     * @var ModbusMasterTcp
-     */
-    protected ModbusMasterTcp $modbus;
-
-    /**
      * @var int
      */
     protected int $reference;
@@ @@
     /**
      * @var string
      */
-    protected string $name;
-
-    /**
-     * @var string
-     */
-    protected string $description;
-
-    /**
-     * @var string
-     */
     protected string $formatString;

     /**
@@ @@

     /**
      * Register constructor.
-     * @param ModbusMasterTcp $modbus
-     * @param int $address
-     * @param string $name
-     * @param string $description
-     * @param string $formatString
      * @throws Exception
      */
     public function __construct(
-        ModbusMasterTcp $modbus,
+        protected ModbusMasterTcp $modbus,
         int $address,
-        string $name,
-        string $description,
+        protected string $name,
+        protected string $description,
         string $formatString = '%s'
     ) {
-        $this->modbus = $modbus;
         $this->reference = ($address - self::REGISTER_START_ADDRESS);
-        $this->name = $name;
-        $this->description = $description;
         $this->formatString = Translation::singleton()->translate($formatString);
     }

     /**
      * Used for test purpose
-     *
-     * @param ModbusMasterTcp $modbus
      */
     public function setModbus(ModbusMasterTcp $modbus): void
     {
@@ @@


     /**
-     * @param bool $formatted
-     * @param bool $force
      * @return mixed
      */
     public function getValue(bool $formatted = false, bool $force = false): mixed
    ----------- end diff -----------

Applied rules:
 * PublicConstantVisibilityRector (https://wiki.php.net/rfc/class_const_visibility)
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * ClassPropertyAssignToConstructorPromotionRector (https://wiki.php.net/rfc/constructor_promotion https://github.com/php/php-src/pull/5291)
 * MixedTypeRector


6) src/PHPModbus/ModbusMaster.php:45

    ---------- begin diff ----------
@@ @@
  * @package    Phpmodbus
  *
  */
-class ModbusMaster
+class ModbusMaster implements \Stringable
 {
     /** @var Socket|false */
     private Socket|false $sock;

-    /** @var string Modbus device IP address */
-    public string $host = "192.168.1.1";
-
     /** @var int gateway port */
     public int $port = 502;

@@ @@
     public float $socket_write_timeout_sec = 1;

     /** @var int Endianness codding (0 = little endian = 0, 1 = big endian) */
-    public int $endianness = IecType::LITTLE_ENDIAN; //
+    public int $endianness = IecType::LITTLE_ENDIAN;

-    /** @var string Socket protocol (TCP, UDP) */
-    public string $socket_protocol = "UDP";
-
     /**
      * ModbusMaster
      *
@@ @@
      * This is the constructor that defines {@link $host} IP address of the object.
      *
      * @param String $host     An IP address of a Modbus TCP device. E.g. "192.168.1.1"
-     * @param String $protocol Socket protocol (TCP, UDP)
+     * @param String $socket_protocol Socket protocol (TCP, UDP)
      */
-    public function __construct(string $host, string $protocol)
+    public function __construct(public string $host, public string $socket_protocol)
     {
-        $this->socket_protocol = $protocol;
-        $this->host = $host;
     }

     /**
@@ @@
      *
      * Magic method
      */
-    public function __toString()
+    public function __toString(): string
     {
         return "<pre>" . $this->status . "</pre>";
     }
@@ @@
     /**
      * Convert float in seconds to array
      *
-     * @param float $secs
      * @return array {sec: ..., usec: ...}
      */
     private function secsToSecUsecArray(float $secs): array
@@ @@
      */
     private function rec(): ?string
     {
+        $readsocks = [];
         socket_set_nonblock($this->sock);
         $readsocks[] = $this->sock;
         $writesocks = null;
@@ @@
         $buffer2 .= IecType::iecINT($quantity);       // quantity
         $dataLen += 5;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
@@ @@
         $buffer2 .= IecType::iecINT($quantity);       // quantity
         $dataLen += 5;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
@@ @@
         $buffer2 .= IecType::iecINT($quantity);       // quantity
         $dataLen += 5;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
@@ @@
         $buffer2 .= IecType::iecINT($quantity);                                         // quantity
         $dataLen += 5;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));                                     // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));                                     // transaction ID
         $buffer3 .= IecType::iecINT(0);                                                 // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);                                      // lenght
         $buffer3 .= IecType::iecBYTE($unitId);                                          // unit ID
@@ @@
         $buffer2 .= IecType::iecINT($reference);      // refnumber = 12288
         $dataLen += 3;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
@@ @@
         $buffer2 .= IecType::iecINT($reference);      // refnumber = 12288
         $dataLen += 3;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
@@ @@
         $buffer2 .= IecType::iecBYTE((count($data) + 7) / 8);       // byte count
         $dataLen += 6;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        // unit ID
@@ @@
         $buffer2 .= IecType::iecBYTE($dataLen);     // byte count
         $dataLen += 6;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
@@ @@
         $buffer2 .= IecType::iecINT($orMask);          // OR mask
         $dataLen += 7;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
@@ @@
         $buffer2 .= IecType::iecBYTE($dataLen);       // byte count
         $dataLen += 10;
         // build header
-        $buffer3 = IecType::iecINT(rand(0, 65000));   // transaction ID
+        $buffer3 = IecType::iecINT(random_int(0, 65000));   // transaction ID
         $buffer3 .= IecType::iecINT(0);               // protocol ID
         $buffer3 .= IecType::iecINT($dataLen + 1);    // lenght
         $buffer3 .= IecType::iecBYTE($unitId);        //unit ID
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RandomFunctionRector
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * ClassPropertyAssignToConstructorPromotionRector (https://wiki.php.net/rfc/constructor_promotion https://github.com/php/php-src/pull/5291)
 * StringableForToStringRector (https://wiki.php.net/rfc/stringable)
 * MixedTypeRector


 [OK] 6 files have been changed by Rector                                                                               

